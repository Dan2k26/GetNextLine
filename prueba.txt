#include "get_next_line.h"

static int	count_till_newline(char *buff)
{
	int	i;

	i = 0;
	while (buff[i] != '\n' && buff[i] != '\0')
		i++;
	return (i);
}

static char	*assign_chars(char *aux)
{
	int		i;
	char	*str;

	i = 0;
	while (aux[i] != '\n' && aux[i] != '\0')
		i++;
	str = calloc(sizeof(char), i + 1);
	ft_memcpy(str, aux, i + 1);
	return (str);
}

static void	clean_chr(void *s, size_t n)
{
	unsigned int		i;
	char				*str;

	i = -1;
	str = (char *) s;
	while (++i < n)
		str[i] = 0;
}

static char	*read_line(int size, int fd, char **buff, char **str)
{
	char	*aux;

	while (size > 0)
	{
		aux = *str;
		*str = ft_strjoin(aux, *buff);
		free(aux);
		if (ft_strchr(*str, '\n') != NULL)
		{
			*buff = *buff + count_till_newline(*buff) + 1;
			break ;
		}
		size = read(fd, buff, BUFFER_SIZE);
	}
	return (*str);
}

char	*get_next_line(int fd)
{
	static char	*buff;
	char		*str;
	char		*aux;
	ssize_t		size;

	if (!buff)
		buff = calloc(sizeof(char), BUFFER_SIZE + 1);
	if (read(fd, buff, 0) == -1 || BUFFER_SIZE < 1)
		return (NULL);
	str = ft_strdup("");
	if (ft_strchr(buff, '\n') != NULL)
	{
		aux = str;
		str = ft_strjoin(aux, buff);
		free(aux);
		aux = str;
		str = assign_chars(aux);
		free(aux);
		buff = buff + count_till_newline(buff) + 1;
		return (str);
	}
	if (buff[0] != '\0')
	{
		aux = str;
		str = ft_strjoin(aux, buff);
		free(aux);
	}
	size = read(fd, buff, BUFFER_SIZE);
	if (size == 0)
		return (NULL);
	while (size > 0)
	{
		aux = str;
		str = ft_strjoin(aux, buff);
		free(aux);
		if (ft_strchr(str, '\n') != NULL)
		{
			buff = buff + count_till_newline(buff) + 1;
			break ;
		}
		size = read(fd, buff, BUFFER_SIZE);
		buff[size] = '\0';
	}
	aux = str;
	str = assign_chars(aux);
	//free(aux);
	return (str);
}
